module Main where

import Graphics.HGL
import Graphics.HGL.Units(Point(..))

import Data.Array
import Control.Monad( when )
import Data.IORef
import Data.Semigroup

newtype XorRegion = XorRegion { getXorRegion :: Region }
  deriving ()

instance Semigroup XorRegion where
  (<>) :: XorRegion -> XorRegion -> XorRegion
  (<>) (XorRegion a) (XorRegion b) = XorRegion $ a `xorRegion` b

instance Monoid XorRegion where
  mempty :: XorRegion
  mempty = emptyRegion


add :: Point -> Point -> Point
add (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

horizontalLineRegion :: Int -> Point -> Region
horizontalLineRegion start cellSize =
  rectangleRegion $ start `plus` (cellSize * 8, cellSize)

verticalLineRegion :: Int -> Point -> Region 
verticalLineRegion start cellSize =
  rectangleRegion $ start `plus` (cellSize, cellSize * 8)

boardRegion :: Int -> Point -> Region
boardRegion start cellSize = foldr 
  where
    horizontalLines :: [Region]
    horizontalLines = map $ take 4 $ (horizontalLineRegion cellSize) iterate (\p -> p + (cellSize, 0)) start 
    verticalLines :: [Region]
    verticalLines = map $ take 4 $ (verticalLineRegion cellSize) iterate (\p -> p + (0, cellSize)) start 


main = runGraphics $ do
  w <- openWindow "My First Graphics Program" (400,400)
  let myRegion = rectangleRegion (100, 100) (200, 200)
  drawInWindow w (regionToGraphic myRegion)
  return ()